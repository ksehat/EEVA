# -*- coding: utf-8 -*-
"""EEVA_v8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jPIXsQtgXn_KazrnRistFMNuf8pB85ej
"""
# IMPORTS
import pandas as pd
import math
import os.path
import time
import ta
from geneticalgorithm import geneticalgorithm as ga
from binance.client import Client
from datetime import timedelta, datetime
from dateutil import parser
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
from ta.trend import MACD,EMAIndicator,IchimokuIndicator
from ta.momentum import RSIIndicator as RSI
import copy
import plotly.graph_objects as go

def MACD_IND(data,win_slow,win_fast,win_sign):
    MACD_IND1 = MACD(data['close'], window_slow=win_slow, window_fast=win_fast, window_sign=win_sign)
    data['MACD']         = MACD_IND1.macd()
    data['MACD_signal']  = MACD_IND1.macd_signal()
    data['MACD_Hist']    = MACD_IND1.macd_diff()
    data['MACD_ZC']      = np.where((data['MACD_Hist']*(data['MACD_Hist'].shift(1,axis=0))) < 0,1,0)
    return data

def Ichi(data,win1,win2,win3):
    Ichimoku_IND1 = IchimokuIndicator(high=data['high'], low=data['low'], window1=win1, window2=win2, window3=win3)
    data['Ichimoku_a']               = Ichimoku_IND1.ichimoku_a()
    data['Ichimoku_b']               = Ichimoku_IND1.ichimoku_b()
    data['Ichimoku_base_line']       = Ichimoku_IND1.ichimoku_base_line()
    data['Ichimoku_conversion_line'] = Ichimoku_IND1.ichimoku_conversion_line()
    return data

def plot_figure(df,index_X,index_A,index_B,index_C,index_buy,index_sell,X,A,B,C,width,height):
    fig = go.Figure(data=[go.Candlestick(x=df['timestamp'][index_X-10:index_sell+10],
                                         open=df['open'][index_X-10:index_sell+10],
                                         high=df['high'][index_X-10:index_sell+10],
                                         low=df['low'][index_X-10:index_sell+10],
                                         close=df['close'][index_X-10:index_sell+10]),
                          go.Scatter(x=df['timestamp'][index_X-10:index_sell+10],
                                     y=df['Ichimoku_base_line'][index_X-10:index_sell+10]),
                          go.Scatter(x=df['timestamp'][index_X-10:index_sell+10],
                                     y=df['Ichimoku_conversion_line'][index_X-10:index_sell+10]),
                          go.Scatter(x=[df['timestamp'][index_X],df['timestamp'][index_A],df['timestamp'][index_B],df['timestamp'][index_C]],
                                     y=[X,A,B,C],mode='lines+markers',marker=dict(size=[10,11,12,13],color=[0,1,2,3]))]
                                     , layout=go.Layout(autosize=False, width=width, height=height))
    fig.add_shape(type="line",
    x0=df['timestamp'][index_buy], y0=min(df.loc[index_X:index_sell,'low']), x1=df['timestamp'][index_buy], y1=max(df.loc[index_X:index_sell,'high']))
    fig.add_shape(type="line",
    x0=df['timestamp'][index_sell], y0=min(df.loc[index_X:index_sell,'low']), x1=df['timestamp'][index_sell], y1=max(df.loc[index_X:index_sell,'high']))    
    fig.show()

def minutes_of_new_data(symbol, kline_size, data, start_date, source):
    if len(data) > 0:  old = parser.parse(data["timestamp"].iloc[-1])
    elif source == "binance": old = datetime.strptime(start_date, '%d %b %Y')
    if source == "binance": new = pd.to_datetime(binance_client.get_klines(symbol=symbol, interval=kline_size)[-1][0], unit='ms')
    return old, new
 
def get_all_binance(symbol, kline_size, start_date='1 Jan 2021' , save = False):
    filename = f'{symbol}-{kline_size}-data-from-{start_date}.csv' 
    if os.path.isfile(filename): data_df = pd.read_csv(filename)
    else: data_df = pd.DataFrame()
    oldest_point, newest_point = minutes_of_new_data(symbol, kline_size, data_df, start_date, source = "binance")
    delta_min = (newest_point - oldest_point).total_seconds()/60
    available_data = math.ceil(delta_min/binsizes[kline_size])
    if oldest_point == datetime.strptime(start_date, '%d %b %Y'): print(f'Downloading all available {kline_size} data for {symbol} from {start_date}. Be patient..!')
    else: print('Downloading %d minutes of new data available for %s, i.e. %d instances of %s data.' % (delta_min, symbol, available_data, kline_size))
    klines = binance_client.get_historical_klines(symbol, kline_size, oldest_point.strftime("%d %b %Y %H:%M:%S"), newest_point.strftime("%d %b %Y %H:%M:%S"))
    data = pd.DataFrame(klines, columns = ['timestamp', 'open', 'high', 'low', 'close', 'volume', 'close_time', 'quote_av', 'trades', 'tb_base_av', 'tb_quote_av', 'ignore' ])
    data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms')
    if len(data_df) > 0:
        temp_df = pd.DataFrame(data)
        data_df = data_df.append(temp_df)
    else: data_df = data
    data_df.set_index('timestamp', inplace=True)
    if save: data_df.to_csv(filename)
    print('All caught up..!')
    return data_df

def download_data(binance_symbols, start_date, data_step):
    for symbol in binance_symbols:
        data_org = pd.DataFrame()
        data_org = get_all_binance(symbol, data_step, start_date, save = True)
    data_org.index = data_org.index.map(lambda x: x if type(x)==str else str(x))
    data_org = data_org[~data_org.index.duplicated(keep='last')]
    data = data_org.filter(['open', 'high', 'low', 'close', 'volume', 'close_time', 'quote_av', 'trades', 'tb_base_av', 'tb_quote_av'])
    data1 = data.astype(float).copy(deep=True)
    return data1

def prepare_data_indicators(data1, MACD_win_slow=26, MACD_win_fast=12, MACD_win_sign=9):
    data2 = Ichi(data1,9,26,52)
    data3 = MACD_IND(data2, MACD_win_slow, MACD_win_fast, MACD_win_sign)
    df_def = data3.copy(deep=True)
    df_def.reset_index(inplace=True)
    return df_def

def backtest_xabc(df, plot=False, print_trades_details=False, leverage=1, plot_width=1000, plot_height=600):
    ZC_Index = pd.DataFrame({'zcindex': df[df['MACD_ZC'] == 1].index.values,
                             'timestamp': df.loc[df['MACD_ZC'] == 1, 'timestamp'],
                             'MACD_Hist': df.loc[df['MACD_ZC'] == 1, 'MACD_Hist']},
                            columns=['zcindex', 'timestamp', 'MACD_Hist']).reset_index(drop=True)

    money = 1
    trade_fee = 0.002
    buy = 0
    date_pointer = 0
    date_of_trade_list = []
    profit_loss_list = []
    money_after_each_trade_list = []
    money_before_each_trade_list = []
    num_of_pos_trades = 0
    num_of_neg_trades = 0
    num_of_pos_trades_list = []
    num_of_neg_trades_list = []
    for row_zcindex, zcindex in ZC_Index.iterrows():
        if row_zcindex + 4 <= len(ZC_Index) - 1:
            if zcindex[0] >= date_pointer:  # to eliminate the XABC into another XABC
                # pdb.set_trace()
                if df['MACD_Hist'][zcindex[0]] >= 0:
                    X = max(df.iloc[zcindex[0]: ZC_Index.iloc[row_zcindex + 1, 0]]['high'])
                    index_X = df.iloc[zcindex[0]: ZC_Index.iloc[row_zcindex + 1, 0]]['high'].idxmax()
                    A = min(df.iloc[ZC_Index.iloc[row_zcindex + 1, 0]: ZC_Index.iloc[row_zcindex + 2, 0]]['low'])
                    index_A = df.iloc[ZC_Index.iloc[row_zcindex + 1, 0]: ZC_Index.iloc[row_zcindex + 2, 0]][
                        'low'].idxmin()
                    B = max(df.iloc[ZC_Index.iloc[row_zcindex + 2, 0]: ZC_Index.iloc[row_zcindex + 3, 0]]['high'])
                    index_B = df.iloc[ZC_Index.iloc[row_zcindex + 2, 0]: ZC_Index.iloc[row_zcindex + 3, 0]][
                        'high'].idxmax()
                    C = min(df.iloc[ZC_Index.iloc[row_zcindex + 3, 0]: ZC_Index.iloc[row_zcindex + 4, 0]]['low'])
                    index_C = df.iloc[ZC_Index.iloc[row_zcindex + 3, 0]: ZC_Index.iloc[row_zcindex + 4, 0]][
                        'low'].idxmin()

                    if A < X and B < X and C < X and B > A and C < A:
                        Index_4 = ZC_Index.iloc[row_zcindex + 4, 0]

                        for date_pointer in range(Index_4, 10000):

                            if df.values[date_pointer:date_pointer + 1, 3] <= C:
                                if buy == 1:
                                    buy = 0
                                    index_sell = date_pointer
                                    money = money - leverage * ((B - C) / B) * money - trade_fee * money
                                    loss = -leverage * ((B - C) / B) * money - trade_fee * money
                                    if print_trades_details:
                                        print(df['timestamp'][date_pointer], 'sell+:', C)
                                        print('loss:', loss)
                                    date_of_trade_list.append(df['timestamp'][date_pointer])
                                    profit_loss_list.append(loss)
                                    num_of_neg_trades += 1
                                    num_of_neg_trades_list.append(num_of_neg_trades)
                                    num_of_pos_trades_list.append(num_of_pos_trades)
                                    money_after_each_trade_list.append(money)
                                    if plot:
                                        plot_figure(df, index_X, index_A, index_B, index_C, index_buy, index_sell, X, A,
                                                    B, C, plot_width, plot_height)
                                    break
                                if buy == 0:
                                    break
                            if ((df.values[date_pointer:date_pointer + 1, 4] >= B)
                                    and (df.values[date_pointer:date_pointer + 1, 4] >= df.values[
                                                                                        date_pointer:date_pointer + 1,
                                                                                        13])
                                    and (df.values[date_pointer:date_pointer + 1, 4] >= df.values[
                                                                                        date_pointer:date_pointer + 1,
                                                                                        14])):  # 2:high, 3:low, 4:close
                                if buy == 0:
                                    buy = 1
                                    index_buy = date_pointer
                                    if print_trades_details:
                                        print(df['timestamp'][index_X], 'X:', X)
                                        print(df['timestamp'][index_A], 'A:', A)
                                        print(df['timestamp'][index_B], 'B:', B)
                                        print(df['timestamp'][index_C], 'C:', C)
                                        print(df['timestamp'][date_pointer], 'buy+:', B)
                                    money_before_each_trade_list.append(money)
                                if (buy == 1) and (df.values[date_pointer:date_pointer + 1, 2] >= (B - C + B)):
                                    buy = 0
                                    index_sell = date_pointer
                                    money = money + leverage * ((B - C) / B) * money - trade_fee * money
                                    profit = leverage * ((B - C) / B) * money - trade_fee * money
                                    if print_trades_details:
                                        print(df['timestamp'][date_pointer], 'sell++:', (2 * B - C))
                                        print('profit:', profit)
                                    date_of_trade_list.append(df['timestamp'][date_pointer])
                                    profit_loss_list.append(profit)
                                    num_of_pos_trades += 1
                                    num_of_pos_trades_list.append(num_of_pos_trades)
                                    num_of_neg_trades_list.append(num_of_neg_trades)
                                    money_after_each_trade_list.append(money)
                                    if plot:
                                        plot_figure(df, index_X, index_A, index_B, index_C, index_buy, index_sell, X, A,
                                                    B, C, plot_width, plot_height)
                                    break

                if df['MACD_Hist'][zcindex[0]] < 0:
                    X = min(df.iloc[zcindex[0]: ZC_Index.iloc[row_zcindex + 1, 0]]['low'])
                    index_X = df.iloc[zcindex[0]: ZC_Index.iloc[row_zcindex + 1, 0]]['low'].idxmin()
                    A = max(df.iloc[ZC_Index.iloc[row_zcindex + 1, 0]: ZC_Index.iloc[row_zcindex + 2, 0]]['high'])
                    index_A = df.iloc[ZC_Index.iloc[row_zcindex + 1, 0]: ZC_Index.iloc[row_zcindex + 2, 0]][
                        'high'].idxmax()
                    B = min(df.iloc[ZC_Index.iloc[row_zcindex + 2, 0]: ZC_Index.iloc[row_zcindex + 3, 0]]['low'])
                    index_B = df.iloc[ZC_Index.iloc[row_zcindex + 2, 0]: ZC_Index.iloc[row_zcindex + 3, 0]][
                        'low'].idxmin()
                    C = max(df.iloc[ZC_Index.iloc[row_zcindex + 3, 0]: ZC_Index.iloc[row_zcindex + 4, 0]]['high'])
                    index_C = df.iloc[ZC_Index.iloc[row_zcindex + 3, 0]: ZC_Index.iloc[row_zcindex + 4, 0]][
                        'high'].idxmax()

                    if A > X and B > X and C > X and B < A and C > A:
                        Index_4 = ZC_Index.iloc[row_zcindex + 4, 0]
                        for date_pointer in range(Index_4, 10000):
                            if df.values[date_pointer:date_pointer + 1, 2] >= C:
                                if buy == 1:
                                    buy = 0
                                    index_sell = date_pointer
                                    money = money - leverage * ((C - B) / B) * money - trade_fee * money
                                    loss = -leverage * ((C - B) / B) * money - trade_fee * money
                                    if print_trades_details:
                                        print(df['timestamp'][date_pointer], 'sell-:', C)
                                        print('loss:', loss)
                                    date_of_trade_list.append(df['timestamp'][date_pointer])
                                    profit_loss_list.append(loss)
                                    num_of_neg_trades += 1
                                    num_of_neg_trades_list.append(num_of_neg_trades)
                                    num_of_pos_trades_list.append(num_of_pos_trades)
                                    money_after_each_trade_list.append(money)
                                    if plot:
                                        plot_figure(df, index_X, index_A, index_B, index_C, index_buy, index_sell, X, A,
                                                    B, C, plot_width, plot_height)
                                    break
                                if buy == 0:
                                    break
                            if ((df.values[date_pointer:date_pointer + 1, 4] <= B)
                                    and (df.values[date_pointer:date_pointer + 1, 4] <= df.values[
                                                                                        date_pointer:date_pointer + 1,
                                                                                        13])
                                    and (df.values[date_pointer:date_pointer + 1, 4] <= df.values[
                                                                                        date_pointer:date_pointer + 1,
                                                                                        14])):  # 2:high, 3:low, 4:close
                                if buy == 0:
                                    buy = 1
                                    index_buy = date_pointer
                                    if print_trades_details:
                                        print(df['timestamp'][index_X], 'X:', X)
                                        print(df['timestamp'][index_A], 'A:', A)
                                        print(df['timestamp'][index_B], 'B:', B)
                                        print(df['timestamp'][index_C], 'C:', C)
                                        print(df['timestamp'][date_pointer], 'buy-:', B)
                                    money_before_each_trade_list.append(money)
                                if (buy == 1) and (df.values[date_pointer:date_pointer + 1, 3] <= (B - (C - B))):
                                    buy = 0
                                    index_sell = date_pointer
                                    money = money + leverage * ((C - B) / B) * money - trade_fee * money
                                    profit = leverage * ((C - B) / B) * money - trade_fee * money
                                    if print_trades_details:
                                        print(df['timestamp'][date_pointer], 'sell--:', (2 * B - C))
                                        print('profit:', profit)
                                    date_of_trade_list.append(df['timestamp'][date_pointer])
                                    profit_loss_list.append(profit)
                                    num_of_pos_trades += 1
                                    num_of_pos_trades_list.append(num_of_pos_trades)
                                    num_of_neg_trades_list.append(num_of_neg_trades)
                                    money_after_each_trade_list.append(money)
                                    if plot:
                                        plot_figure(df, index_X, index_A, index_B, index_C, index_buy, index_sell, X, A,
                                                    B, C, plot_width, plot_height)
                                    break

    Profit_Loss_Table = pd.DataFrame({
        'date': date_of_trade_list,
        'profit & loss': profit_loss_list,
        'num_of_pos_trades': num_of_pos_trades_list,
        'num_of_neg_trades': num_of_neg_trades_list,
        'money_after_trade': money_after_each_trade_list,
        'money_before_trade': money_before_each_trade_list
    })

    Profit_Loss_Table['date'] = pd.to_datetime(Profit_Loss_Table['date'])
    Profit_Loss_Table['num_of_all_trades'] = Profit_Loss_Table['num_of_neg_trades'] + Profit_Loss_Table[
        'num_of_pos_trades']

    Profit_Loss_Table['year'] = Profit_Loss_Table['date'].apply(lambda t: t.year)
    Profit_Loss_Table['month'] = Profit_Loss_Table['date'].apply(lambda t: t.month)
    Profit_Loss_Table['day'] = Profit_Loss_Table['date'].apply(lambda t: t.day)

    Money_each_month = Profit_Loss_Table.groupby(['year', 'month'])
    month_profit_loss_list = []
    year_month_list = []
    month_pos_trades = []
    month_neg_trades = []
    month_all_trades = []
    last_month_num_pos_trades = 0
    last_month_num_neg_trades = 0
    last_month_num_all_trades = 0
    for key, value in zip(Money_each_month.groups.keys(), Money_each_month.groups.values()):
        first_money = Profit_Loss_Table['money_before_trade'][value[0]]
        last_money = Profit_Loss_Table['money_after_trade'][value[-1]]
        month_profit = (last_money - first_money) * 100 / first_money
        month_profit_loss_list.append(month_profit)

        month_pos_trades.append(Profit_Loss_Table['num_of_pos_trades'][value[-1]] - last_month_num_pos_trades)
        month_neg_trades.append(Profit_Loss_Table['num_of_neg_trades'][value[-1]] - last_month_num_neg_trades)
        month_all_trades.append(Profit_Loss_Table['num_of_all_trades'][value[-1]] - last_month_num_all_trades)

        year_month_list.append(key)
        last_month_num_pos_trades = Profit_Loss_Table['num_of_pos_trades'][value[-1]]
        last_month_num_neg_trades = Profit_Loss_Table['num_of_neg_trades'][value[-1]]
        last_month_num_all_trades = Profit_Loss_Table['num_of_all_trades'][value[-1]]
    Profit_Loss_Table_by_Year_Month = pd.DataFrame({
        'year_month': year_month_list,
        'profit & loss': month_profit_loss_list,
        'positive trades': month_pos_trades,
        'negative trades': month_neg_trades,
        'all trades': month_all_trades,
    })

    return (money-1)*100, Profit_Loss_Table_by_Year_Month

def fine_tune_xabc(X):
    global data_global
    data = data_global
    MACD_win_slow=X[0]
    MACD_win_fast=X[1]
    MACD_win_sign=X[2]
    df_fine_tuner = prepare_data_indicators(data, MACD_win_slow, MACD_win_fast, MACD_win_sign)
    final_money, each_month_table = backtest_xabc(df_fine_tuner)
    return -final_money

binance_api_key = '[REDACTED]'    #Enter your own API-key here
binance_api_secret = '[REDACTED]' #Enter your own API-secret here
binsizes = {"1m": 1, "5m": 5, "8m": 8, "15m": 15, "30m": 30, "1h": 60, "2h": 120, "4h": 240, "6h": 360, "12h": 720, "1d": 1440}
batch_size = 750
binance_client = Client(api_key= '43PXiL32cF1YFXwkeoK900wOZx8saS1T5avSRWlljStfwMrCl7lZhhJSIM1ijIzS' , api_secret= 'JjJRJ3bWQTEShF4Eu8ZigY9aEMGPnFNJMH3WoNlOQgxSgrHmLOflIavhMx0KSZFC')

data_global = download_data(["BTCUSDT"], '1 Jan 2021', '1h')

# varbound = np.array([[26, 52], [12, 24], [9, 18]])
# vartype = np.array([['int'], ['int'], ['int']])
# algorithm_param = {'max_num_iteration': 100,\
#                    'population_size':100,\
#                    'mutation_probability':0.1,\
#                    'elit_ratio': 0.01,\
#                    'crossover_probability': 0.5,\
#                    'parents_portion': 0.3,\
#                    'crossover_type':'uniform',\
#                    'max_iteration_without_improv':20}
#
# model = ga(function=fine_tune_xabc, dimension=3, variable_type_mixed=vartype, variable_boundaries=varbound, algorithm_parameters=algorithm_param)
#
# model.run()
# print(model.output_dict)

a = fine_tune_xabc([45,14,9])
print(a)